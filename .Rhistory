View(totalSteps)
View(totalSteps)
totalSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "sum")
View(totalSteps)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
#steps <- hist(totalSteps$Group.1, nclass = 7, plot = FALSE)
hist(totalSteps$Group.1, main="Total Steps Taken by Day", xlab="Days", col="red", plot=TRUE)
hist(totalSteps$Group.1, main="Total Steps Taken by Day", xlab="Days", col="red")
hist(totalSteps$x, main="Total Steps Taken by Day", xlab="Days", col="red")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
#steps <- hist(totalSteps$Group.1, nclass = 7, plot = FALSE)
hist(totalSteps$x, main="Total Steps Taken by Day", xlab="Days", col="red")
hist(totalSteps$x, main="Total Steps Taken by Day", xlab="Days", col="red")
graphics.off()
hist(totalSteps$x, main="Total Steps Taken by Day", xlab="Days", col="red")
hist(StepsTotal$steps, main = "Total steps by day", xlab = "Date", col = "red")
hist(totalSteps$steps, main="Total Steps Taken by Day", xlab="Date", col="red")
hist(totalSteps$x, main="Total Steps Taken by Day", xlab="Date", col="red")
graphics.off()
hist(totalSteps$x, main="Total Steps Taken by Day", xlab="Date", col="red")
graphics.off()
hist(totalSteps$x, names.arg =totalSteps$date main="Total Steps Taken by Day", xlab="Date", col="red")
hist(totalSteps$x, names.arg =totalSteps$day, main="Total Steps Taken by Day", xlab="Date", col="red")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps per Day")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps per Day", col="red")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps per Day", col="red")
dev.off()
#solve the problem of no plot initially
graphics.off()
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps per Day", col="red")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps per Day", col="red")
totalSteps <- aggregate(activityData.sub$steps ~ date, by=list(day = activityData.sub$date), FUN = "sum")
totalSteps <- aggregate(steps ~ date, by=list(day = activityData.sub$date), FUN = "sum")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
graphics.off()
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
dev.off()
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
meanSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "mean")
medianSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "median")
View(meanSteps)
View(medianSteps)
totalSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "sum")
View(totalSteps)
meanSteps <- mean(totalSteps$steps,na.rm=TRUE)
medianSteps <- median(totalSteps$steps,na.rm=TRUE)
meanSteps <- mean(totalSteps$x,na.rm=TRUE)
medianSteps <- median(totalSteps$x,na.rm=TRUE)
steps
aveSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "mean")
View(aveSteps)
require(ggplot2)
ggplot( data = df, aes( Date, aveSteps )) + geom_line()
ggplot( data = df, aes( Date, aveSteps$x)) + geom_line()
aveSteps <- aggregate(activityData.sub$steps ~ activityData.sub$interval, by=list(day = activityData.sub$date), FUN = "mean")
aveSteps <- aggregate(activityData.sub$steps~activityData.sub$interval, by=list(day = activityData.sub$date), FUN = "mean")
aveSteps <- aggregate(cbind(activityData.sub$steps~activityData.sub$interval), by=list(day = activityData.sub$date), FUN = "mean")
head(activityData.sub)
aveSteps <- aggregate(steps~interval, activityData.sub, FUN = "mean")
View(aveSteps)
require(ggplot2)
ggplot( data = df, aes( Date, aveSteps$x)) + geom_line()
plot(aveSteps, type = "l", xlab="Intervals", ylab="Average Steps per interval", main="Average steps per interval")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "AveStepsHistogram.png", width = 480, height = 480, units = "px")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
graphnics.off()
graphics.off()
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "AveStepsHistogram.png", width = 480, height = 480, units = "px")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
dev.off()
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
aveSteps <- max(aveSteps)
aveSteps$interval[which.max(aveSteps$steps)]
aveSteps <- aggregate(steps~interval, activityData.sub, FUN = "mean")
aveSteps$interval[which.max(aveSteps$steps)]
View(aveSteps)
sum(!complete.cases(activityData))
activityData[is.na(activityData)] <- 0
View(activityData)
naData <- is.na(activity$steps)
naData <- is.na(activityData$steps)
activityData$steps[naData] <- activityData$steps.y[naData]
View(activityData)
activityData <- activityData[, c(1:3)]
View(activityData)
activityData <- data.frame(read.csv("./activity.csv", header = TRUE, sep = ","))
View(activityData)
naData <- is.na(activityData$steps)
activityData$steps[naData] <- activityData$steps.y[naData]
naData <- is.na(activityData$steps)
activityData$steps[naData]
activityData$steps.y[naData]
activityMerged <- merge(activity,aveSteps, by = "interval", suffixes = c("",".ave"))
activityMerged <- merge(activityData,aveSteps, by = "interval", suffixes = c("",".ave"))
View(activityMerged)
activityMerged <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
View(activityMerged)
naData <- is.na(activityData$steps)
activityData$steps[naData] <- activityData$stepsMean[naData]
activityMerged$steps[naData] <- activityMerged$stepsMean[naData]
View(activityData)
View(activityMerged)
activityMerged <- activityMerged[, c(1:3)]
View(activityMerged)
View(activityMerged)
View(activityMerged)
activityNew <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
naData <- is.na(activityData$steps)
activityNew$steps[naData] <- activityNew$stepsMean[naData]
#7.Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityNew <- activityNew[, c(1:3)]
View(activityNew)
totalStepsNew <- aggregate(activityNew$steps, by=list(day = activityNew$date), FUN = "sum")
View(totalStepsNew)
activityNew <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
naData <- is.na(activityNew$steps)
activityNew$steps[naData] <- activityNew$stepsMean[naData]
#7.Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityNew <- activityNew[, c(1:3)]
totalStepsNew <- aggregate(activityNew$steps, by=list(day = activityNew$date), FUN = "sum")
View(totalStepsNew)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
png(filename = "NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
graphics.off()
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
meanSteps <- mean(totalStepsNew$x,na.rm=TRUE)
medianSteps <- median(totalStepsNew$x,na.rm=TRUE)
meanStepsNew <- mean(totalStepsNew$x,na.rm=TRUE)
medianStepsNew <- median(totalStepsNew$x,na.rm=TRUE)
activityNew[,"weekday"]  <- (as.POSIXlt(activityData.sub$date))$wday+1
activityNew[,"weekday"]  <- (as.POSIXlt(activityNew$date))$wday+1
View(activityNew)
if ((as.POSIXlt(activityNew$date))$wday+1) < 6)
then
activityNew[,"levels"]  <- "Weekday"
else
activityNew[,"levels"]  <- "Weekend"
if ((as.POSIXlt(activityNew$date))$wday+1) < 6)
activityNew[,"levels"]  <- "Weekday"
else
activityNew[,"levels"]  <- "Weekend"
if (as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6)
if ((as.numeric(as.POSIXlt(activityNew$date))$wday+1)) < 6)
if ((as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6)
activityNew[,"levels"]  <- "Weekday"
else
activityNew[,"levels"]  <- "Weekend"
if ((as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6) {
activityNew[,"levels"]  <- "Weekday"}
else  {
activityNew[,"levels"]  <- "Weekend"}
if ((as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6) {
activityNew[,"levels"]  <- "Weekday" }
else  {
activityNew[,"levels"]  <- "Weekend" }
if ((as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6) {
activityNew[,"levels"]  <- "Weekday" }
else  {
activityNew[,"levels"]  <- "Weekend"
if ((as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6) {
activityNew[,"levels"]  <- "Weekday"
} else  {
activityNew[,"levels"]  <- "Weekend"
}
activityNew[,"levels"] <- ifelse((as.numeric(as.POSIXlt(activityNew$date))$wday+1) < 6, 'weekday','weekend')
activityNew[,"levels"] <- ifelse(weekdays(activity$date) %in%  c("Saturday", "Sunday"),'weekend','weekday')
activityNew[,"levels"] <- ifelse(weekdays(activityNew$date) %in%  c("Saturday", "Sunday"),'weekend','weekday')
activityNew$levels <- ifelse(weekdays(activityNew$date) %in%  c("Saturday", "Sunday"),'weekend','weekday')
View(activityNew)
activityNew <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
naData <- is.na(activityNew$steps)
activityNew$steps[naData] <- activityNew$stepsMean[naData]
#7.Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityNew <- activityNew[, c(1:3)]
activityNew$levels <- ifelse(weekdays(activityNew$date) %in%  c("Saturday", "Sunday"),'weekend','weekday')
View(totalStepsNew)
View(activityNew)
weekdays(activityNew$date)
weekdays(activityNew$date)
class(activityNew$date)
day <- weekdays(activity$date)
dayType <- vector()
for (i in 1:nrow(activityNew)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
activityNew$daylevel <- dayType
activityNew$daylevel <- factor(activityNew$dayType)
day <- weekdays(activityNew$date)
dayType <- vector()
for (i in 1:nrow(activityNew)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
activityNew$daylevel <- dayType
activityNew$daylevel <- factor(activityNew$dayType)
View(activityNew)
dayType <- vector()
for (i in 1:nrow(activityNew)) {
if (day[i] == "Saturday") {
activityNew$daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
activityNew$daylevel[i] <- "Weekend"
} else {
activityNew$daylevel[i] <- "Weekday"
}
}
day <- weekdays(activityNew$date)
dayType <- vector()
for (i in 1:nrow(activityNew)) {
if (day[i] == "Saturday") {
activityNew$daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
activityNew$daylevel[i] <- "Weekend"
} else {
activityNew$daylevel[i] <- "Weekday"
}
}
day <- weekdays(activityNew$date)
day <- weekdays(activityData$date)
activityData <- data.frame(read.csv("./activity.csv", header = TRUE, sep = ","))
activityData <- read.csv("./activity.csv", header = TRUE, sep = ",")
day <- weekdays(activityData$date)
day <- weekdays(as.Date(activityData$date))
activityNew$levels <- ifelse(as.Date(weekdays(activityNew$date)) %in%  c("Saturday", "Sunday"),'weekend','weekday')
activityNew$levels <- ifelse(weekdays(as.Date(activityNew$date)) %in%  c("Saturday", "Sunday"),'weekend','weekday')
View(activityNew)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
par(mfcol = c(1, 2))
png(filename = "NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
graphics.off()
par(mfcol = c(1, 2))
png(filename = "NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
histogram<-barplot(totalSteps$x, ylim = range(0:40),names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, ylim = range(0:40), names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
graphics.off()
par(mfcol = c(1, 2))
png(filename = "NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, ylim = range(0:40),names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, ylim = range(0:40), names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
histogram<-barplot(totalSteps$x, ylim = range(0:40),names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, ylim = range(0:40), names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
graphics.off()
histogram<-barplot(totalSteps$x, ylim = range(0:40),names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, ylim = range(0:40), names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
head(activityNew)
aveStepsNew <- aggregate(steps~levels, activityNew, FUN = "mean")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "4TimeSeriesPlotAcrossWeekendsWeekdays", width = 480, height = 480, units = "px")
library(ggplot2)
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
View(aveStepsNew)
aveStepsNew <- aggregate(intervals~levels, activityNew, FUN = "mean")
head(activityNew)
aveStepsNew <- aggregate(interval~levels, activityNew, FUN = "mean")
View(aveStepsNew)
head(activityNew)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "4TimeSeriesPlotAcrossWeekendsWeekdays", width = 480, height = 480, units = "px")
library(ggplot2)
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
graphics.off()
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
setwd("~/1Wendy/Data Science Course/Reproducible Research/Peer Assignment 1")
#read in activity.csv
activityData <- data.frame(read.csv("./activity.csv", header = TRUE, sep = ","))
#subset data to omit NA value
activityData.sub <- subset(activityData, steps != "NA")
#1. Make a histogram of the total number of steps taken each day
#add day, month, year columns to activity data frame
activityData.sub[,"day"]  <- (as.POSIXlt(activityData.sub$date))$mday
activityData.sub[,"month"]  <- (as.POSIXlt(activityData.sub$date))$mon+1
activityData.sub[,"year"]  <- (as.POSIXlt(activityData.sub$date))$year+1900
#aggregate steps by day
totalSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "sum")
#prepare to plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "1StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
#2. Calculate and report the mean and median total number of steps taken per day
#Mean is 10766 and median is 10765
meanSteps <- mean(totalSteps$x,na.rm=TRUE)
medianSteps <- median(totalSteps$x,na.rm=TRUE)
#3. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
head(activityData.sub)
aveSteps <- aggregate(steps~interval, activityData.sub, FUN = "mean")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "2TimeSeriesPlotAcrossDays", width = 480, height = 480, units = "px")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
#4. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#The interval is 835
aveSteps$interval[which.max(aveSteps$steps)]
#5. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
#Total number of rows with NA value is 2304
sum(!complete.cases(activityData))
#6. Devise a strategy for filling in all of the missing values in the dataset.
#The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#Use mean to replace NA value
activityNew <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
naData <- is.na(activityNew$steps)
activityNew$steps[naData] <- activityNew$stepsMean[naData]
#7.Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityNew <- activityNew[, c(1:3)]
#8. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of inputing missing data on the estimates of the total daily number of steps?
totalStepsNew <- aggregate(activityNew$steps, by=list(day = activityNew$date), FUN = "sum")
par(mfcol = c(1, 2))
png(filename = "3NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
meanStepsNew <- mean(totalStepsNew$x,na.rm=TRUE) #10766
medianStepsNew <- median(totalStepsNew$x,na.rm=TRUE) #10766
#mean is the same after filling in missing values but some differences in median
#9. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activityNew$levels <- ifelse(weekdays(as.Date(activityNew$date)) %in%  c("Saturday", "Sunday"),'weekend','weekday')
#10. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
head(activityNew)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "4TimeSeriesPlotAcrossWeekendsWeekdays.png", width = 480, height = 480, units = "px")
library(ggplot2)
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
graphics.off()
setwd("~/1Wendy/Data Science Course/Reproducible Research/Peer Assignment 1")
#read in activity.csv
activityData <- data.frame(read.csv("./activity.csv", header = TRUE, sep = ","))
#subset data to omit NA value
activityData.sub <- subset(activityData, steps != "NA")
#1. Make a histogram of the total number of steps taken each day
#add day, month, year columns to activity data frame
activityData.sub[,"day"]  <- (as.POSIXlt(activityData.sub$date))$mday
activityData.sub[,"month"]  <- (as.POSIXlt(activityData.sub$date))$mon+1
activityData.sub[,"year"]  <- (as.POSIXlt(activityData.sub$date))$year+1900
#aggregate steps by day
totalSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "sum")
#prepare to plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "1StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
#2. Calculate and report the mean and median total number of steps taken per day
#Mean is 10766 and median is 10765
meanSteps <- mean(totalSteps$x,na.rm=TRUE)
medianSteps <- median(totalSteps$x,na.rm=TRUE)
#3. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
head(activityData.sub)
aveSteps <- aggregate(steps~interval, activityData.sub, FUN = "mean")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "2TimeSeriesPlotAcrossDays.png", width = 480, height = 480, units = "px")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
#4. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#The interval is 835
aveSteps$interval[which.max(aveSteps$steps)]
#5. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
#Total number of rows with NA value is 2304
sum(!complete.cases(activityData))
#6. Devise a strategy for filling in all of the missing values in the dataset.
#The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#Use mean to replace NA value
activityNew <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
naData <- is.na(activityNew$steps)
activityNew$steps[naData] <- activityNew$stepsMean[naData]
#7.Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityNew <- activityNew[, c(1:3)]
#8. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of inputing missing data on the estimates of the total daily number of steps?
totalStepsNew <- aggregate(activityNew$steps, by=list(day = activityNew$date), FUN = "sum")
par(mfcol = c(1, 2))
png(filename = "3NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (omit NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
meanStepsNew <- mean(totalStepsNew$x,na.rm=TRUE) #10766
medianStepsNew <- median(totalStepsNew$x,na.rm=TRUE) #10766
#mean is the same after filling in missing values but some differences in median
#9. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activityNew$levels <- ifelse(weekdays(as.Date(activityNew$date)) %in%  c("Saturday", "Sunday"),'weekend','weekday')
#10. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
head(activityNew)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "4TimeSeriesPlotAcrossWeekendsWeekdays.png", width = 480, height = 480, units = "px")
library(ggplot2)
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
setwd("~/1Wendy/Data Science Course/Reproducible Research/Peer Assignment 1")
#read in activity.csv
activityData <- data.frame(read.csv("./activity.csv", header = TRUE, sep = ","))
#subset data to omit NA value
activityData.sub <- subset(activityData, steps != "NA")
#1. Make a histogram of the total number of steps taken each day
#add day, month, year columns to activity data frame
activityData.sub[,"day"]  <- (as.POSIXlt(activityData.sub$date))$mday
activityData.sub[,"month"]  <- (as.POSIXlt(activityData.sub$date))$mon+1
activityData.sub[,"year"]  <- (as.POSIXlt(activityData.sub$date))$year+1900
#aggregate steps by day
totalSteps <- aggregate(activityData.sub$steps, by=list(day = activityData.sub$date), FUN = "sum")
#prepare to plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "1StepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="red")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="red")
png(filename = "2TimeSeriesPlotAcrossDays.png", width = 480, height = 480, units = "px")
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
graphics.off()
plot(aveSteps, type = "l", xlab="5-min Intervals", ylab="Average Steps", main="Average steps per interval", col="red")
aveSteps$interval[which.max(aveSteps$steps)]
sum(!complete.cases(activityData))
activityNew <- merge(activityData,aveSteps, by = "interval", suffixes = c("","Mean"))
naData <- is.na(activityNew$steps)
activityNew$steps[naData] <- activityNew$stepsMean[naData]
#7.Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityNew <- activityNew[, c(1:3)]
totalStepsNew <- aggregate(activityNew$steps, by=list(day = activityNew$date), FUN = "sum")
par(mfcol = c(1, 2))
png(filename = "3NewStepsHistogram.png", width = 480, height = 480, units = "px")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day", col="blue")
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
png(filename = "3NewStepsHistogram.png", width = 480, height = 480, units = "px")
par(mfcol = c(1, 2))
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
par(mfcol = c(2, 2))
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
par(mfcol = c(2, 1))
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
png(filename = "3NewStepsHistogram.png", width = 600, height = 600, units = "px")
par(mfcol = c(2, 1))
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
graphics.off()
histogram<-barplot(totalSteps$x, names.arg =totalSteps$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (exclude NA)", col="red")
histogram<-barplot(totalStepsNew$x, names.arg =totalStepsNew$day, xlab = "Date",ylab="Total Daily Steps", main="Number of Steps each Day (include NA)", col="blue")
meanStepsNew <- mean(totalStepsNew$x,na.rm=TRUE) #10766
medianStepsNew <- median(totalStepsNew$x,na.rm=TRUE) #10766
activityNew$levels <- ifelse(weekdays(as.Date(activityNew$date)) %in%  c("Saturday", "Sunday"),'weekend','weekday')
head(activityNew)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "4TimeSeriesPlotAcrossWeekendsWeekdays.png", width = 480, height = 480, units = "px")
library(ggplot2)
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
graphics.off()
qplot(x=interval, y=steps,data=subset(activityNew, complete.cases(activityNew)),geom='smooth', stat='summary', fun.y=mean) + facet_grid(levels~.) + facet_wrap(~levels,nrow=2) + theme(strip.background = element_rect(fill="#ffe5cc")) + labs(title=' Average steps per days differentating by weekdays and weekend patterns')
knitr::opts_chunk$set(echo=TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo=TRUE)
setwd("~/1Wendy/Data Science Course/Reproducible Research/Peer Assignment 1")
